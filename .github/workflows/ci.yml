name: CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Ensure 3rd/pdf-extract exists (fallback clone)
        shell: bash
        run: |
          if [ ! -f 3rd/pdf-extract/Cargo.toml ]; then
            echo "3rd/pdf-extract missing; cloning fallback repo..."
            git clone --depth=1 https://github.com/jrmuizel/pdf-extract 3rd/pdf-extract
          fi

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libglib2.0-dev \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            pkg-config \
            build-essential

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: client/package-lock.json

      - name: Install client dependencies (include dev)
        run: npm ci --include=dev
        working-directory: client
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: 'backend/requirements-build.txt'

      - name: Prepare backend virtualenv
        shell: bash
        run: |
          python -m venv backend/.venv
          VENV_PYTHON=$(python -c "import pathlib, sys; root = pathlib.Path('backend/.venv').resolve(); path = root / ('Scripts/python.exe' if sys.platform.startswith('win') else 'bin/python'); print(path)")
          echo "VENV_PYTHON=$VENV_PYTHON" >> $GITHUB_ENV

      - name: Install backend test dependencies
        run: |
          "$VENV_PYTHON" -m pip install --upgrade pip
          "$VENV_PYTHON" -m pip install -r backend/requirements-build.txt fastapi pytest httpx

      - name: Build rust_core extension (for tests)
        working-directory: backend/rust_core
        run: |
          "$VENV_PYTHON" -m pip install maturin==1.9.6
          "$VENV_PYTHON" -m maturin develop --release

      - name: Run backend tests
        working-directory: .
        run: |
          "$VENV_PYTHON" -m pytest -q backend

      - name: Build React client
        run: npm run build
        working-directory: client

      - name: Run client unit tests
        run: npm run -s test
        working-directory: client

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: "rustfmt, clippy"

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            client/src-tauri
            backend/rust_core
            3rd/pdf-extract
          cache-on-failure: true

      - name: Cargo fmt
        run: cargo fmt --all -- --check
        working-directory: client/src-tauri

      - name: Cargo test
        run: cargo test --all --release
        working-directory: client/src-tauri

      - name: Cargo clippy
        run: cargo clippy --all-targets -- -D warnings
        working-directory: client/src-tauri

  smoke:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install backend runtime deps (minimal)
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r backend/requirements-build.txt

      - name: Smoke test RPC worker (health only)
        shell: bash
        run: |
          set -euxo pipefail
          python -c 'import sys,json,subprocess; p=subprocess.Popen([sys.executable,"backend/rpc_server.py"], stdin=subprocess.PIPE, stdout=subprocess.PIPE, text=True); req={"jsonrpc":"2.0","id":1,"method":"health","params":{}}; p.stdin.write(json.dumps(req)+"\n"); p.stdin.flush(); line=p.stdout.readline().strip(); p.terminate(); print(line); resp=json.loads(line); assert resp.get("result", {}).get("status")=="ok", f"unexpected response: {resp}"'

  windows-smoke:
    runs-on: windows-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Prepare backend virtualenv
        shell: bash
        run: |
          python -m venv backend/.venv
          VENV_PYTHON=$(python -c "import pathlib, sys; root = pathlib.Path('backend/.venv').resolve(); path = root / ('Scripts/python.exe' if sys.platform.startswith('win') else 'bin/python'); print(path)")
          echo "VENV_PYTHON=$VENV_PYTHON" >> $GITHUB_ENV

      - name: Ensure 3rd/pdf-extract exists (fallback clone)
        shell: pwsh
        run: |
          if (-not (Test-Path '3rd/pdf-extract/Cargo.toml')) {
            Write-Host "3rd/pdf-extract missing; cloning fallback repo..."
            git clone --depth=1 https://github.com/jrmuizel/pdf-extract 3rd/pdf-extract
          }

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install backend build deps
        shell: pwsh
        run: |
          & $env:VENV_PYTHON -m pip install --upgrade pip
          & $env:VENV_PYTHON -m pip install -r backend/requirements-build.txt

      - name: Build rust_core extension (Windows)
        working-directory: backend/rust_core
        shell: pwsh
        run: |
          & $env:VENV_PYTHON -m pip install maturin==1.9.6
          & $env:VENV_PYTHON -m maturin develop --release

      - name: PyInstaller build rpc_server.exe
        working-directory: backend
        shell: pwsh
        run: |
          & $env:VENV_PYTHON build.py

      - name: Smoke test rpc_server.exe (stdin JSON-RPC)
        shell: pwsh
        run: |
          $exe = Resolve-Path 'backend/dist/rpc_server/rpc_server.exe'
          if (-not (Test-Path $exe)) { throw "rpc_server.exe not found at $exe" }
          $psi = New-Object System.Diagnostics.ProcessStartInfo
          $psi.FileName = $exe
          $psi.RedirectStandardInput = $true
          $psi.RedirectStandardOutput = $true
          $psi.RedirectStandardError = $true
          $psi.UseShellExecute = $false
          $psi.EnvironmentVariables['PYTHONIOENCODING'] = 'utf-8'
          $psi.EnvironmentVariables['PYTHONUTF8'] = '1'
          $psi.EnvironmentVariables['HF_HUB_ENABLE_HF_XET'] = '0'
          $psi.EnvironmentVariables['HF_HUB_DISABLE_TELEMETRY'] = '1'
          $tmpCache = Join-Path $env:TEMP 'lexai-hf-cache'
          New-Item -ItemType Directory -Force -Path $tmpCache | Out-Null
          $psi.EnvironmentVariables['HF_HOME'] = $tmpCache
          $psi.EnvironmentVariables['HF_HUB_CACHE'] = $tmpCache
          $psi.EnvironmentVariables['HUGGINGFACE_HUB_CACHE'] = $tmpCache
          $psi.EnvironmentVariables['TRANSFORMERS_CACHE'] = $tmpCache
          $psi.EnvironmentVariables['SENTENCE_TRANSFORMERS_HOME'] = $tmpCache
          $psi.EnvironmentVariables['HF_HUB_DISABLE_SYMLINKS'] = '1'
          $psi.EnvironmentVariables['PYTHONUNBUFFERED'] = '1'
          $p = [System.Diagnostics.Process]::Start($psi)
          $req = '{"jsonrpc":"2.0","id":1,"method":"health_plus","params":{}}'
          $p.StandardInput.WriteLine($req)
          $p.StandardInput.Flush()
          $line = $p.StandardOutput.ReadLine()
          $p.Kill()
          Write-Host "Response: $line"
          $resp = $line | ConvertFrom-Json
          if ($resp.result.status -ne 'ok') { throw "unexpected response: $line" }

